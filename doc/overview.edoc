@title stacktrace_compat
@doc

<a target="_parent" href="https://hex.pm/packages/stacktrace_compat" alt="Hex.pm Package">
    <img src="https://img.shields.io/hexpm/v/stacktrace_compat.svg?style=flat"/></a>
<a target="_parent" href="https://travis-ci.org/g-andrade/stacktrace_compat" alt="Build Status">
    <img src="https://travis-ci.org/g-andrade/stacktrace_compat.png?branch=master"/></a>

`stacktrace_compat' is a workaround for the `erlang:get_stacktrace()' deprecation on Erlang/OTP 21.

It intends on smoothing near-future maintenence of projects that are to support both
pre- and post-deprecation code by avoiding code duplication or ungainly macros.

<h4>Getting Started</h4>

<h5>1. Import as dependency</h5>

rebar.config:

<pre lang="erlang" class="erlang">
{deps,
 [% [...]
  {stacktrace_compat, "1.0.0"}
 ]}.
</pre>

<h5>2. Apply transform when compiling modules</h5>

rebar.config:

<pre lang="erlang" class="erlang">
{erl_opts,
 [% [...]
  {parse_transform, stacktrace_transform}
 ]}.
</pre>

<h4>Example Transform</h4>

The following snippet:

<pre lang="erlang" class="erlang">
foobar() ->
    try
        1 / (rand:uniform(2) - 1)
    catch
        error:badarith ->
            {error, {badarith, erlang:get_stacktrace()}}
    end.
</pre>

...is transformed into:

<pre lang="erlang" class="erlang">
foobar() ->
    try
        1 / (rand:uniform(2) - 1)
    catch
        error:badarith:StacktraceCompat444353487_1 ->
            {error, {badarith, StacktraceCompat444353487_1}}
    end.
</pre>

<h4>Details</h4>

`stacktrace_transform' defines a parse transform (`stacktrace_transform') which, when
applied to a module on OTP 21+, will replace `erlang:get_stacktrace()' calls with instances
of the stacktrace binding that was captured on the closest catch pattern up the execution tree
(within the same function.)

If no binding has been defined, a generated name will be used that's likely to be conflict free.

If no catch pattern is found, no replacement is made. This makes sense in naked calls to
`erlang:get_stacktrace()' (as they're a no-no) but not in calls from within caught exception helpers
- it's a limitation yet to be worked out (if at all.)

@end
